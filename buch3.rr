/*
def spolynomial(F,G) {
    DF = multi_degree(F);
    DG = multi_degree(G);
    Mx = DF[0]>DG[0]?DF[0]:DG[0];
    My = DF[1]>DG[1]?DF[1]:DG[1];
    Mz = DF[2]>DG[2]?DF[2]:DG[2];
    
    CC = [x^(Mx-DF[0])*y^(My-DF[1])*z^(Mz-DF[2])/DF[3], -x^(Mx-DG[0])*y^(My-DG[1])*z^(Mz-DG[2])/DG[3]];

    return [x^(Mx-DF[0])*y^(My-DF[1])*z^(Mz-DF[2])*F/DF[3]-x^(Mx-DG[0])*y^(My-DG[1])*z^(Mz-DG[2])*G/DG[3], CC];
}
*/

def spolynomial(F,G,ORD) {
    DF = multi_degree(F,ORD);
    DG = multi_degree(G,ORD);

    F_VEC = newvect(length(F));
    G_VEC = newvect(length(G));
    for(I = 0; I < length(F); I++) {
        F_VEC[I] = F[I];
        G_VEC[I] = G[I];
    }

    if(DF[0][1] != DG[0][1]) {
        return 0;
    }

    Len_M = length(MyVar);
    M_Var = newvect(Len_M);
    for(I = 0; I < Len_M; I++) {
        M_Var[I] = DF[I][0]>DG[I][0]?DF[I][0]:DG[I][0];
    }
    /*
    Mx = DF[0][0]>DG[0][0]?DF[0][0]:DG[0][0];
    My = DF[1][0]>DG[1][0]?DF[1][0]:DG[1][0];
    Mz = DF[2][0]>DG[2][0]?DF[2][0]:DG[2][0];
    */
    //CC = [x^(Mx-DF[0])*y^(My-DF[1])*z^(Mz-DF[2])/DF[3], -x^(Mx-DG[0])*y^(My-DG[1])*z^(Mz-DG[2])/DG[3]];

    //Spoly = x^(Mx-DF[0][0])*y^(My-DF[1][0])*z^(Mz-DF[2][0])*F_VEC/DF[3][0]-x^(Mx-DG[0][0])*y^(My-DG[1][0])*z^(Mz-DG[2][0])*G_VEC/DG[3][0];
    Spoly1 = 1;
    Spoly2 = 1;
    for(I = 0; I < Len_M; I++) {
        Spoly1 *= MyVar[I]^(M_Var[I]-DF[I][0]);
        Spoly2 *= MyVar[I]^(M_Var[I]-DG[I][0]);
    }
    Spoly = Spoly1*F_VEC/DF[3][0] - Spoly2*G_VEC/DG[3][0];
    S = [];
    for(I = 0; I < length(Spoly); I++) {
        S = append(S, [Spoly[I]]);
    }
    return S;
    //return [x^(Mx-DF[0])*y^(My-DF[1])*z^(Mz-DF[2])*F/DF[3]-x^(Mx-DG[0])*y^(My-DG[1])*z^(Mz-DG[2])*G/DG[3], CC];
}

def buchberger(F,ORD) {
    N = length(F);
    Pairs = [];
    
    for ( I = N-1; I >= 0; I-- ) {
        for ( J = N-1; J > I; J-- ) {
            Pairs = cons([I,J],Pairs);
        }
    }
    
    G = F;

    //NEWC = [];
    Zero_vect = [];
    for(I = 0; I < length(F[0]); I++) {
        Zero_vect = append(Zero_vect, [0]);
    }
    while ( Pairs != [] ) {
        P = car(Pairs);
        Pairs = cdr(Pairs);
        //print(G[P[0]]);
        //print(G[P[1]]);
        Sp = spolynomial(G[P[0]],G[P[1]],ORD);
        print("SPSPSPSPSPSPSPSPSPSPSPSP");
        print(Sp);
        //Rem = reduction2(Sp[0],G,ORD);
        if(Sp == 0) {
            Rem = Zero_vect;
        } else {
            Rem = reduction2(Sp,G,ORD);
            print("RRRRRRRRRRRRRRRRRRRRRR");
            print(Rem);
        }
        if ( Rem != Zero_vect ) {
            // Gの更新
            G = append(G,[Rem]);
            print(G);
            //print(C);
            for ( I = 0; I < N; I++ ) {
                Pairs = cons([I,N],Pairs);
            }
            N++;
        }
    }
    
    //C = matrix_matrix_to_list(NEWC);
    // C = vtol(NEWC);
    //return [G, C];
    return G;
}

//def minimal(G, C) {
def minimal(G) {
    N = length(G);
    Zero_vec = newvect(length(G[0]));
    Zero_vect = matrix_matrix_to_list(Zero_vec);

    MG = [];
    //CC = [];
    for(I = 0; I < N; I++) {
        GG = [];
        for(J = 0; J < N; J++) {
            if(I != J) {
                PP = pot(G[J],ORD);
                GG = append(GG, [PP[3]]);
            }
        }
        print(GG);
        /*
        GGG = [];
        for(K = 0; K < length(GG); K++) {
            GG1 = [];
            for(L = 0; L < length(GG[K][1]); L++) {
                GG1 = append(GG1, [GG[K][0]*GG[K][1][L]]);
            }
            GGG = append(GGG, [GG1]);
        }
        */
                
        PP = pot(G[I],ORD);
        print(PP[3]);
        print(GG);
        RR = reduction2(PP[3],GG,ORD);
        print(RR);
        //if(RR[1] != 0) {
        if(RR != Zero_vect) {
            MG = append(MG, [G[I]]);
            //CC = append(CC, [C[I]]);
        }
    }

    return MG;
    //return [MG, CC];
}

def reduce(G, C) {
    MG = minimal(G, C);
    N = length(MG[0]);

    MG2 = [];
    CC = [];
    for(I = 0; I < N; I++) {
        CCC = newvect(N);
        PPP = in2(MG[0][I]);
        MG2 = append(MG2, [MG[0][I]/PPP[1]]);
        for(J = 0; J < N; J++) {
            if(I == J) {
                CCC[I] = 1/PPP[1];
            }
        }
        CC = append(CC, [matrix_matrix_to_list(CCC)]);
    }

    C2 = matrix_list_to_matrix(CC);

    RG = [];
    CC = [];
    for(I = 0; I < N; I++) {
        CCC = newvect(N);
        for(J = 0; J < N; J++) {
            if(I == J) {
                CCC[I] = 1;
            }
        }
        PPP = MG2[I];
        NEWP = 0;

        while(PPP != 0) {
            INP = in2(PPP);
            for(J = 0; J < N; J++) {
                if(I == J) {
                    J = J + 1;
                }
                if(J >= N) {
                    break;
                }

                INQ = in2(MG2[J]);
                JUDGE = is_reducible(INP[0],INQ[0],ORD);
                if(JUDGE != 0) {
                    PPP = PPP - JUDGE*MG2[J];
                    for(K = 0; K < N; K++) {
                        if(K == J) {
                            CCC[J] = CCC[J] - JUDGE;
                        }
                        /*
                        else {
                            CCC = append(CCC, [0]);
                        }
                        */
                    }
                    break;
                }
                else {
                    if(J >= N-1 || (J >= N-2 && I >= N-1)) {
                        NEWP = NEWP + INP[0];
                        PPP = PPP - INP[0];
                        break;
                    }
                }
            }
        }

        CC = append(CC, [matrix_matrix_to_list(CCC)]);
        
        RG = append(RG, [NEWP]);
    }

    C1 = matrix_list_to_matrix(CC);
    C3 = matrix_list_to_matrix(MG[1]);
    CC = C1 * C2;
    CC = CC * C3;
    CR = matrix_matrix_to_list(CC);

    return [RG, CR];
}

end$