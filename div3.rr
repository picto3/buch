/* FGLM(grlexとかのGroebnerをlexのgroebnerに変換) */

extern MyVar;
MyVar = [x,y,z];

def new_in(F, ORD) {
    dp_ord(ORD);
    G = dp_ptod(F, MyVar);
    T = dp_ht(G);
    HT = dp_dtop(T, MyVar);
    HC = dp_hc(T);
    HM = dp_dtop(dp_hm(T), MyVar);
    
    return [HT, HC, HM];
}

def lex(F) {
    dp_ord(2);
    G = dp_ptod(F, MyVar);
    T = dp_ht(G);
    HT = dp_dtop(T, MyVar);
    HC = dp_hc(T);
    HM = dp_dtop(dp_hm(T), MyVar);
    
    return [HT, HC, HM];
}

def revlex(F) {
    dp_ord(0);
    G = dp_ptod(F, MyVar);
    T = dp_ht(G);
    HT = dp_dtop(T, MyVar);
    HC = dp_hc(T);
    HM = dp_dtop(dp_hm(T), MyVar);
    
    return [HT, HC, HM];
}

def deglex(F) {
    dp_ord(1);
    G = dp_ptod(F, MyVar);
    T = dp_ht(G);
    HT = dp_dtop(T, MyVar);
    HC = dp_hc(T);
    HM = dp_dtop(dp_hm(T), MyVar);
    
    return [HT, HC, HM];
}

def pot(F,ORD) {
    N = length(F);
    I = 0;
    while(I < N) {
        if(F[I] != 0) {
            break;
        }
        I++;
    }

    G = new_in(F[I], ORD);

    S = [];
    for(J = 0; J < N; J++) {
        if(J == I) {
            S = append(S, [1]);
        }
        else {
            S = append(S, [0]);
        }
    }

    CCC = scala_mul(G[0], S);

    return [[G[0],S],[G[1],S],[G[2],S],CCC];
}

def multi_degree(F, ORD) {
    F = pot(F, ORD);
    T = F[2];

    //print("--- in multi_degree ---");
    //print(F);
    //print(T);

    return([[deg(T[0],x),T[1]], [deg(T[0],y), T[1]], [deg(T[0],z), T[1]], F[1]]);
    //return([[deg(T[0],x),T[1]], [deg(T[0],y), T[1]], [deg(T[0],z), T[1]], F[1]]);
}

def is_reducible(F,G,ORD) {
    DF = multi_degree(F, ORD);
    DG = multi_degree(G, ORD);

    print(DF);
    print(DG);

    if(DF[0][1] != DG[0][1]) {
        return [0];
    }

    if(DF[0][0] >= DG[0][0] && DF[1][0] >= DG[1][0] && DF[2][0] >= DG[2][0]) {
        return [red(DF[3][0]/DG[3][0])*x^(DF[0][0]-DG[0][0])*y^(DF[1][0]-DG[1][0])*z^(DF[2][0]-DG[2][0]), DF[0][1]];
    }
    else {
        return [0];
    }
}

def scala_mul(Mono, Vec) {
    V = newvect(length(Vec));
    for(I = 0; I < length(Vec); I++) {
        V[I] = Mono*Vec[I];
    }
    VV = matrix_matrix_to_list(V);

    return VV;
}

/*
def division(F,G) {
    Q = 0; R = F;
    D = is_reducible(R, G);
    while(type(D[0]) != 0) {
        Q = Q+D[0];
        R = R-D[0]*G;
        D = is_reducible(R,G);
    }

    return [Q,R];
}
*/

def reduction2(F,G,ORD) {
    Rem = newvect(length(F));
    
    N = length(G);
    
    T = matrix_list_to_matrix(F);
    Zero_vect = newvect(length(F));
    //Zero_vect = newvect(1);
    //QQ = newvect(N);
    while(T != Zero_vect) {
        for(U = Zero_vect, L = G, I = 0; L != []; L = cdr(L)) {
            Red = car(L);
            TT = matrix_matrix_to_list(T);
            Mono = is_reducible(TT, Red, ORD);

            print("TT  ----  Mono");
            print([TT, Mono]);

            if(Mono != [0]) {
                RR = matrix_list_to_matrix(Red);
                
                //print("RRRRRRRRRRRRRRRRRRRR");
                //print(RR);
                
                for(JJ = 0; JJ < length(Red); JJ++) {
                    RR[JJ] = RR[JJ]*Mono[0];
                }
                
                print("Mono * RR");
                print(RR);
                
                U = T-RR;

                print("UUUUUUUUUUUUUUUUUUUUU");
                print(U);

                if(U == Zero_vect) {
                    return matrix_matrix_to_list(Rem);
                }
                break;
            }
            I = I+1;
        }

        print("U2u2u2u2u2u2u2u2u2u2u2u2");
        print(U);

        if(U != Zero_vect) {
            T = U;
        }
        else {
            TT = matrix_matrix_to_list(T);
            H = pot(TT,ORD);
            HH = newvect(length(H[0][1]));
            for(JJ = 0; JJ < length(H[0][1]); JJ++) {
                HH[JJ] = H[0][0]*H[0][1][JJ];
            }
            //HH = matrix_list_to_matrix(H);
            /*
            print("HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH");
            print(HH);
            */
            Rem += HH;
            T -= HH;
            print(T);
            print(Rem);
        }
    }
    // Q = matrix_matrix_to_list([QQ]);
    //Q = vtol(QQ);
    //return [Q, Rem];
    return matrix_matrix_to_list(Rem);
}

end$